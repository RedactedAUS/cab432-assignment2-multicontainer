version: '3.8'

services:
  # PostgreSQL Database (First Data Persistence Service)
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mpegapi
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d mpegapi"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Optional - for future caching criterion)
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main Application (Stateless)
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: mpeg-api-app
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      # AWS Configuration
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      # Database Configuration (PostgreSQL)
      - RDS_HOSTNAME=postgres
      - RDS_PORT=5432
      - RDS_USERNAME=postgres
      - RDS_PASSWORD=password
      - RDS_DB_NAME=mpegapi
      # CORS Configuration
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:80}
    # NO VOLUME MOUNTS FOR STATELESSNESS - all data in cloud services
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const req = http.request({hostname:'localhost',port:3000,path:'/api/v1/health',timeout:5000}, (res) => process.exit(res.statusCode === 200 ? 0 : 1)); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NGINX Reverse Proxy (Production setup)
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      app:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
